{"ast":null,"code":"var _jsxFileName = \"/media/renatha/Downloads/DEV/IFPB/contacts-ui/context/contact/contactState.js\";\nvar __jsx = React.createElement;\nimport React, { useReducer } from 'react';\nimport api from '../../utils/api';\nimport ContactContext from './contactContext';\nimport contactReducer from './contactReducer';\nimport { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT_CONTACT, CLEAR_CURRENT_CONTACT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_CONTACTS, CLEAR_FILTER_CONTACT, CONTACT_ERROR } from '../types';\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: null,\n    current: null,\n    filtered: null,\n    error: null\n  };\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(contactReducer, initialState); // Get Contacts\n\n  const getContacts = async () => {// try {\n    //   const res = await api.get('/api/contacts')\n    //   dispatch({\n    //     type: GET_CONTACTS,\n    //     payload: res.data\n    //   })\n    // } catch (err) {\n    //   dispatch({\n    //     type: CONTACT_ERROR,\n    //     payload: err.response.msg\n    //   })\n    // }\n  };\n\n  const addContact = async contact => {\n    try {\n      const res = await api.post(`/lists/${contact.list}/contacts`, contact);\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: 'Erro ao adicionar contato'\n      });\n    }\n  };\n\n  const deleteContact = async ({\n    list_id,\n    contact_id\n  }) => {\n    try {\n      await api.delete(`/lists/${list_id}/contacts/${contact_id}`);\n      dispatch({\n        type: DELETE_CONTACT,\n        payload: contact_id\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: 'Erro ao deletar contato'\n      });\n    }\n  };\n\n  const updateContact = async ({\n    list_id,\n    contact\n  }) => {\n    try {\n      await api.put(`/lists/${list_id}/contacts/${contact.id}`, contact);\n      dispatch({\n        type: UPDATE_CONTACT,\n        payload: {\n          list_id,\n          contact\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: 'Erro ao atualizar o contato'\n      });\n    }\n  };\n\n  const clearContacts = () => {\n    dispatch({\n      type: CLEAR_CONTACTS\n    });\n  };\n\n  const setCurrentContact = contact => {\n    dispatch({\n      type: SET_CURRENT_CONTACT,\n      payload: contact\n    });\n  };\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT_CONTACT\n    });\n  };\n\n  const filterContacts = text => {\n    dispatch({\n      type: FILTER_CONTACTS,\n      payload: text\n    });\n  };\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER_CONTACT\n    });\n  };\n\n  return __jsx(ContactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      filtered: state.filtered,\n      error: state.error,\n      addContact,\n      deleteContact,\n      setCurrentContact,\n      clearCurrent,\n      updateContact,\n      filterContacts,\n      clearFilter,\n      getContacts,\n      clearContacts\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default ContactState;","map":{"version":3,"sources":["/media/renatha/Downloads/DEV/IFPB/contacts-ui/context/contact/contactState.js"],"names":["React","useReducer","api","ContactContext","contactReducer","GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT_CONTACT","CLEAR_CURRENT_CONTACT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_CONTACTS","CLEAR_FILTER_CONTACT","CONTACT_ERROR","ContactState","props","initialState","contacts","current","filtered","error","state","dispatch","getContacts","addContact","contact","res","post","list","type","payload","data","err","deleteContact","list_id","contact_id","delete","updateContact","put","id","clearContacts","setCurrentContact","clearCurrent","filterContacts","text","clearFilter","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react'\n\nimport api from '../../utils/api'\nimport ContactContext from './contactContext'\nimport contactReducer from './contactReducer'\nimport {\n  GET_CONTACTS,\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT_CONTACT,\n  CLEAR_CURRENT_CONTACT,\n  UPDATE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_CONTACTS,\n  CLEAR_FILTER_CONTACT,\n  CONTACT_ERROR\n} from '../types'\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: null,\n    current: null,\n    filtered: null,\n    error: null\n  }\n\n  const [state, dispatch] = useReducer(contactReducer, initialState)\n\n  // Get Contacts\n  const getContacts = async () => {\n    // try {\n    //   const res = await api.get('/api/contacts')\n\n    //   dispatch({\n    //     type: GET_CONTACTS,\n    //     payload: res.data\n    //   })\n    // } catch (err) {\n    //   dispatch({\n    //     type: CONTACT_ERROR,\n    //     payload: err.response.msg\n    //   })\n    // }\n  }\n\n  const addContact = async contact => {\n    try {\n      const res = await api.post(`/lists/${contact.list}/contacts`, contact)\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      })\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: 'Erro ao adicionar contato'\n      })\n    }\n  }\n\n  const deleteContact = async ({ list_id, contact_id }) => {\n    try {\n      await api.delete(`/lists/${list_id}/contacts/${contact_id}`)\n\n      dispatch({\n        type: DELETE_CONTACT,\n        payload: contact_id\n      })\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: 'Erro ao deletar contato'\n      })\n    }\n  }\n\n  const updateContact = async ({ list_id, contact }) => {\n    try {\n      await api.put(\n        `/lists/${list_id}/contacts/${contact.id}`,\n        contact\n      )\n\n      dispatch({\n        type: UPDATE_CONTACT,\n        payload: { list_id, contact }\n      })\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: 'Erro ao atualizar o contato'\n      })\n    }\n  }\n\n  const clearContacts = () => {\n    dispatch({ type: CLEAR_CONTACTS })\n  }\n\n  const setCurrentContact = contact => {\n    dispatch({ type: SET_CURRENT_CONTACT, payload: contact })\n  }\n\n  const clearCurrent = () => {\n    dispatch({ type: CLEAR_CURRENT_CONTACT })\n  }\n\n  const filterContacts = text => {\n    dispatch({ type: FILTER_CONTACTS, payload: text })\n  }\n\n  const clearFilter = () => {\n    dispatch({ type: CLEAR_FILTER_CONTACT })\n  }\n\n  return (\n    <ContactContext.Provider\n      value={{\n        contacts: state.contacts,\n        current: state.current,\n        filtered: state.filtered,\n        error: state.error,\n        addContact,\n        deleteContact,\n        setCurrentContact,\n        clearCurrent,\n        updateContact,\n        filterContacts,\n        clearFilter,\n        getContacts,\n        clearContacts\n      }}\n    >\n      {props.children}\n    </ContactContext.Provider>\n  )\n}\n\nexport default ContactState"]},"metadata":{},"sourceType":"module"}