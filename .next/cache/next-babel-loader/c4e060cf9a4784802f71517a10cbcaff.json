{"ast":null,"code":"var _jsxFileName = \"/media/renatha/Downloads/DEV/IFPB/contacts-ui/context/contact/contactState.js\";\nvar __jsx = React.createElement;\nimport React, { useReducer } from 'react';\nimport api from '../../utils/api';\nimport ContactContext from './contactContext';\nimport contactReducer from './contactReducer';\nimport { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT_CONTACT, CLEAR_CURRENT_CONTACT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_CONTACTS, CLEAR_FILTER_CONTACT, CONTACT_ERROR } from '../types';\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: null,\n    current: null,\n    filtered: null,\n    error: null\n  };\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(contactReducer, initialState); // Get Contacts\n\n  const getContacts = async () => {\n    try {\n      const res = await API.get('/api/contacts');\n      dispatch({\n        type: GET_CONTACTS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Add Contact\n\n\n  const addContact = async contact => {\n    try {\n      const res = await API.post(`/lists/${id}/contacts`, contact);\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Delete Contact\n\n\n  const deleteContact = async id => {\n    try {\n      await API.delete(`/api/contacts/${id}`);\n      dispatch({\n        type: DELETE_CONTACT,\n        payload: id\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Update Contact\n\n\n  const updateContact = async contact => {\n    try {\n      const res = await API.put(`/api/contacts/${contact._id}`, contact);\n      dispatch({\n        type: UPDATE_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Clear Contacts\n\n\n  const clearContacts = () => {\n    dispatch({\n      type: CLEAR_CONTACTS\n    });\n  }; // Set Current Contact\n\n\n  const setCurrent = contact => {\n    dispatch({\n      type: SET_CURRENT_CONTACT,\n      payload: contact\n    });\n  }; // Clear Current Contact\n\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT_CONTACT\n    });\n  }; // Filter Contacts\n\n\n  const filterContacts = text => {\n    dispatch({\n      type: FILTER_CONTACTS,\n      payload: text\n    });\n  }; // Clear Filter\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER_CONTACT\n    });\n  };\n\n  return __jsx(ContactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      filtered: state.filtered,\n      error: state.error,\n      addContact,\n      deleteContact,\n      setCurrent,\n      clearCurrent,\n      updateContact,\n      filterContacts,\n      clearFilter,\n      getContacts,\n      clearContacts\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default ContactState;","map":{"version":3,"sources":["/media/renatha/Downloads/DEV/IFPB/contacts-ui/context/contact/contactState.js"],"names":["React","useReducer","api","ContactContext","contactReducer","GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT_CONTACT","CLEAR_CURRENT_CONTACT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_CONTACTS","CLEAR_FILTER_CONTACT","CONTACT_ERROR","ContactState","props","initialState","contacts","current","filtered","error","state","dispatch","getContacts","res","API","get","type","payload","data","err","response","msg","addContact","contact","post","id","deleteContact","delete","updateContact","put","_id","clearContacts","setCurrent","clearCurrent","filterContacts","text","clearFilter","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react'\n\nimport api from '../../utils/api'\nimport ContactContext from './contactContext'\nimport contactReducer from './contactReducer'\nimport {\n  GET_CONTACTS,\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT_CONTACT,\n  CLEAR_CURRENT_CONTACT,\n  UPDATE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_CONTACTS,\n  CLEAR_FILTER_CONTACT,\n  CONTACT_ERROR\n} from '../types'\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: null,\n    current: null,\n    filtered: null,\n    error: null\n  }\n\n  const [state, dispatch] = useReducer(contactReducer, initialState)\n\n  // Get Contacts\n  const getContacts = async () => {\n    try {\n      const res = await API.get('/api/contacts')\n\n      dispatch({\n        type: GET_CONTACTS,\n        payload: res.data\n      })\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      })\n    }\n  }\n\n  // Add Contact\n  const addContact = async contact => {\n    try {\n      const res = await API.post(`/lists/${id}/contacts`, contact)\n\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      })\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      })\n    }\n  }\n\n  // Delete Contact\n  const deleteContact = async id => {\n    try {\n      await API.delete(`/api/contacts/${id}`)\n\n      dispatch({\n        type: DELETE_CONTACT,\n        payload: id\n      })\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      })\n    }\n  }\n\n  // Update Contact\n  const updateContact = async contact => {\n    try {\n      const res = await API.put(\n        `/api/contacts/${contact._id}`,\n        contact\n      )\n\n      dispatch({\n        type: UPDATE_CONTACT,\n        payload: res.data\n      })\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      })\n    }\n  }\n\n  // Clear Contacts\n  const clearContacts = () => {\n    dispatch({ type: CLEAR_CONTACTS })\n  }\n\n  // Set Current Contact\n  const setCurrent = contact => {\n    dispatch({ type: SET_CURRENT_CONTACT, payload: contact })\n  }\n\n  // Clear Current Contact\n  const clearCurrent = () => {\n    dispatch({ type: CLEAR_CURRENT_CONTACT })\n  }\n\n  // Filter Contacts\n  const filterContacts = text => {\n    dispatch({ type: FILTER_CONTACTS, payload: text })\n  }\n\n  // Clear Filter\n  const clearFilter = () => {\n    dispatch({ type: CLEAR_FILTER_CONTACT })\n  }\n\n  return (\n    <ContactContext.Provider\n      value={{\n        contacts: state.contacts,\n        current: state.current,\n        filtered: state.filtered,\n        error: state.error,\n        addContact,\n        deleteContact,\n        setCurrent,\n        clearCurrent,\n        updateContact,\n        filterContacts,\n        clearFilter,\n        getContacts,\n        clearContacts\n      }}\n    >\n      {props.children}\n    </ContactContext.Provider>\n  )\n}\n\nexport default ContactState"]},"metadata":{},"sourceType":"module"}