{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER, CONTACT_ERROR, CLEAR_CONTACTS } from '../types';\nexport default ((state, action) => {\n  console.log('state ', state);\n  console.log('action ', action);\n\n  switch (action.type) {\n    case GET_CONTACTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        contacts: action.payload,\n        loading: false\n      });\n\n    case ADD_CONTACT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        contacts: [action.payload, ...state.contacts],\n        loading: false\n      });\n\n    case UPDATE_CONTACT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        contacts: state.contacts.map(contact => contact._id === action.payload._id ? action.payload : contact),\n        loading: false\n      });\n\n    case DELETE_CONTACT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        contacts: state.contacts.filter(contact => contact._id !== action.payload),\n        loading: false\n      });\n\n    case CLEAR_CONTACTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        contacts: null,\n        filtered: null,\n        error: null,\n        current: null\n      });\n\n    case SET_CURRENT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        current: action.payload\n      });\n\n    case CLEAR_CURRENT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        current: null\n      });\n\n    case FILTER_CONTACTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      });\n\n    case CLEAR_FILTER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        filtered: null\n      });\n\n    case CONTACT_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/media/renatha/Downloads/DEV/IFPB/contacts-ui/context/contact/contactReducer.js"],"names":["GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","CLEAR_CONTACTS","state","action","console","log","type","contacts","payload","loading","map","contact","_id","filter","filtered","error","current","regex","RegExp","name","match","email"],"mappings":";;;;;;AAAA,SACEA,YADF,EAEEC,WAFF,EAGEC,cAHF,EAIEC,WAJF,EAKEC,aALF,EAMEC,cANF,EAOEC,eAPF,EAQEC,YARF,EASEC,aATF,EAUEC,cAVF,QAWO,UAXP;AAaA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,KAAtB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;;AACA,UAAQA,MAAM,CAACG,IAAf;AACE,SAAKd,YAAL;AACE,6CACKU,KADL;AAEEK,QAAAA,QAAQ,EAAEJ,MAAM,CAACK,OAFnB;AAGEC,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKhB,WAAL;AACE,6CACKS,KADL;AAEEK,QAAAA,QAAQ,EAAE,CAACJ,MAAM,CAACK,OAAR,EAAiB,GAAGN,KAAK,CAACK,QAA1B,CAFZ;AAGEE,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKZ,cAAL;AACE,6CACKK,KADL;AAEEK,QAAAA,QAAQ,EAAEL,KAAK,CAACK,QAAN,CAAeG,GAAf,CAAmBC,OAAO,IAClCA,OAAO,CAACC,GAAR,KAAgBT,MAAM,CAACK,OAAP,CAAeI,GAA/B,GAAqCT,MAAM,CAACK,OAA5C,GAAsDG,OAD9C,CAFZ;AAKEF,QAAAA,OAAO,EAAE;AALX;;AAOF,SAAKf,cAAL;AACE,6CACKQ,KADL;AAEEK,QAAAA,QAAQ,EAAEL,KAAK,CAACK,QAAN,CAAeM,MAAf,CACRF,OAAO,IAAIA,OAAO,CAACC,GAAR,KAAgBT,MAAM,CAACK,OAD1B,CAFZ;AAKEC,QAAAA,OAAO,EAAE;AALX;;AAOF,SAAKR,cAAL;AACE,6CACKC,KADL;AAEEK,QAAAA,QAAQ,EAAE,IAFZ;AAGEO,QAAAA,QAAQ,EAAE,IAHZ;AAIEC,QAAAA,KAAK,EAAE,IAJT;AAKEC,QAAAA,OAAO,EAAE;AALX;;AAOF,SAAKrB,WAAL;AACE,6CACKO,KADL;AAEEc,QAAAA,OAAO,EAAEb,MAAM,CAACK;AAFlB;;AAIF,SAAKZ,aAAL;AACE,6CACKM,KADL;AAEEc,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAKlB,eAAL;AACE,6CACKI,KADL;AAEEY,QAAAA,QAAQ,EAAEZ,KAAK,CAACK,QAAN,CAAeM,MAAf,CAAsBF,OAAO,IAAI;AACzC,gBAAMM,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEf,MAAM,CAACK,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBAAOG,OAAO,CAACQ,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BN,OAAO,CAACU,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACD,SAHS;AAFZ;;AAOF,SAAKlB,YAAL;AACE,6CACKG,KADL;AAEEY,QAAAA,QAAQ,EAAE;AAFZ;;AAIF,SAAKd,aAAL;AACE,6CACKE,KADL;AAEEa,QAAAA,KAAK,EAAEZ,MAAM,CAACK;AAFhB;;AAIF;AACE,aAAON,KAAP;AAlEJ;AAoED,CAvED","sourcesContent":["import {\n  GET_CONTACTS,\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_FILTER,\n  CONTACT_ERROR,\n  CLEAR_CONTACTS\n} from '../types';\n\nexport default (state, action) => {\n  console.log('state ', state)\n  console.log('action ', action)\n  switch (action.type) {\n    case GET_CONTACTS:\n      return {\n        ...state,\n        contacts: action.payload,\n        loading: false\n      };\n    case ADD_CONTACT:\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts],\n        loading: false\n      };\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map(contact =>\n          contact._id === action.payload._id ? action.payload : contact\n        ),\n        loading: false\n      };\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          contact => contact._id !== action.payload\n        ),\n        loading: false\n      };\n    case CLEAR_CONTACTS:\n      return {\n        ...state,\n        contacts: null,\n        filtered: null,\n        error: null,\n        current: null\n      };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null\n      };\n    case FILTER_CONTACTS:\n      return {\n        ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null\n      };\n    case CONTACT_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};"]},"metadata":{},"sourceType":"module"}