{"ast":null,"code":"import _regeneratorRuntime from \"/media/renatha/Downloads/DEV/IFPB/contacts-ui/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/media/renatha/Downloads/DEV/IFPB/contacts-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/media/renatha/Downloads/DEV/IFPB/contacts-ui/context/contact/contactState.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useReducer } from 'react';\nimport api from '../../utils/api';\nimport ContactContext from './contactContext';\nimport contactReducer from './contactReducer';\nimport { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT_CONTACT, CLEAR_CURRENT_CONTACT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_CONTACTS, CLEAR_FILTER_CONTACT, CONTACT_ERROR } from '../types';\n\nvar ContactState = function ContactState(props) {\n  _s();\n\n  var initialState = {\n    contacts: null,\n    current: null,\n    filtered: null,\n    error: null\n  };\n\n  var _useReducer = useReducer(contactReducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1]; // Get Contacts\n\n\n  var getContacts = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getContacts() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // Add Contact\n\n\n  var addContact = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(contact) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log('aqui contact ', contact);\n              _context2.prev = 1;\n              _context2.next = 4;\n              return api.post(\"/lists/\".concat(contact.id, \"/contacts\"), contact);\n\n            case 4:\n              res = _context2.sent;\n              console.log('res ', res);\n              dispatch({\n                type: ADD_CONTACT,\n                payload: res.data\n              });\n              _context2.next = 12;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](1);\n              dispatch({\n                type: CONTACT_ERROR,\n                payload: _context2.t0.response\n              });\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 9]]);\n    }));\n\n    return function addContact(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // Delete Contact\n\n\n  var deleteContact = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref3) {\n      var list_id, contact_id;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              list_id = _ref3.list_id, contact_id = _ref3.contact_id;\n              _context3.prev = 1;\n              _context3.next = 4;\n              return api[\"delete\"](\"/lists/\".concat(list_id, \"/contacts/\").concat(contact_id));\n\n            case 4:\n              dispatch({\n                type: DELETE_CONTACT,\n                payload: contact_id\n              });\n              _context3.next = 11;\n              break;\n\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](1);\n              console.log(_context3.t0);\n              dispatch({\n                type: CONTACT_ERROR,\n                payload: 'Erro ao deletar contato'\n              });\n\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 7]]);\n    }));\n\n    return function deleteContact(_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }(); // Update Contact\n\n\n  var updateContact = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref5) {\n      var list_id, contact, res;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              list_id = _ref5.list_id, contact = _ref5.contact;\n              console.log('list_id ', list_id);\n              console.log(contact);\n              _context4.prev = 3;\n              _context4.next = 6;\n              return api.put(\"/lists/\".concat(list_id, \"/contacts/\").concat(contact.id), contact);\n\n            case 6:\n              res = _context4.sent;\n              dispatch({\n                type: UPDATE_CONTACT,\n                payload: res.data\n              });\n              _context4.next = 13;\n              break;\n\n            case 10:\n              _context4.prev = 10;\n              _context4.t0 = _context4[\"catch\"](3);\n              dispatch({\n                type: CONTACT_ERROR,\n                payload: 'Erro ao atualizar o contato'\n              });\n\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[3, 10]]);\n    }));\n\n    return function updateContact(_x3) {\n      return _ref6.apply(this, arguments);\n    };\n  }(); // Clear Contacts\n\n\n  var clearContacts = function clearContacts() {\n    dispatch({\n      type: CLEAR_CONTACTS\n    });\n  }; // Set Current Contact\n\n\n  var setCurrentContact = function setCurrentContact(contact) {\n    dispatch({\n      type: SET_CURRENT_CONTACT,\n      payload: contact\n    });\n  }; // Clear Current Contact\n\n\n  var clearCurrent = function clearCurrent() {\n    dispatch({\n      type: CLEAR_CURRENT_CONTACT\n    });\n  }; // Filter Contacts\n\n\n  var filterContacts = function filterContacts(text) {\n    dispatch({\n      type: FILTER_CONTACTS,\n      payload: text\n    });\n  }; // Clear Filter\n\n\n  var clearFilter = function clearFilter() {\n    dispatch({\n      type: CLEAR_FILTER_CONTACT\n    });\n  };\n\n  return __jsx(ContactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      filtered: state.filtered,\n      error: state.error,\n      addContact: addContact,\n      deleteContact: deleteContact,\n      setCurrentContact: setCurrentContact,\n      clearCurrent: clearCurrent,\n      updateContact: updateContact,\n      filterContacts: filterContacts,\n      clearFilter: clearFilter,\n      getContacts: getContacts,\n      clearContacts: clearContacts\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\n_s(ContactState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = ContactState;\nexport default ContactState;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactState\");","map":{"version":3,"sources":["/media/renatha/Downloads/DEV/IFPB/contacts-ui/context/contact/contactState.js"],"names":["React","useReducer","api","ContactContext","contactReducer","GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT_CONTACT","CLEAR_CURRENT_CONTACT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_CONTACTS","CLEAR_FILTER_CONTACT","CONTACT_ERROR","ContactState","props","initialState","contacts","current","filtered","error","state","dispatch","getContacts","addContact","contact","console","log","post","id","res","type","payload","data","response","deleteContact","list_id","contact_id","updateContact","put","clearContacts","setCurrentContact","clearCurrent","filterContacts","text","clearFilter","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react'\n\nimport api from '../../utils/api'\nimport ContactContext from './contactContext'\nimport contactReducer from './contactReducer'\nimport {\n  GET_CONTACTS,\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT_CONTACT,\n  CLEAR_CURRENT_CONTACT,\n  UPDATE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_CONTACTS,\n  CLEAR_FILTER_CONTACT,\n  CONTACT_ERROR\n} from '../types'\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: null,\n    current: null,\n    filtered: null,\n    error: null\n  }\n\n  const [state, dispatch] = useReducer(contactReducer, initialState)\n\n  // Get Contacts\n  const getContacts = async () => {\n    // try {\n    //   const res = await api.get('/api/contacts')\n\n    //   dispatch({\n    //     type: GET_CONTACTS,\n    //     payload: res.data\n    //   })\n    // } catch (err) {\n    //   dispatch({\n    //     type: CONTACT_ERROR,\n    //     payload: err.response.msg\n    //   })\n    // }\n  }\n\n  // Add Contact\n  const addContact = async contact => {\n    console.log('aqui contact ', contact)\n    try {\n      const res = await api.post(`/lists/${contact.id}/contacts`, contact)\n      console.log('res ', res)\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      })\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response\n      })\n    }\n  }\n\n  // Delete Contact\n  const deleteContact = async ({ list_id, contact_id }) => {\n    try {\n      await api.delete(`/lists/${list_id}/contacts/${contact_id}`)\n\n      dispatch({\n        type: DELETE_CONTACT,\n        payload: contact_id\n      })\n    } catch (err) {\n      console.log(err)\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: 'Erro ao deletar contato'\n      })\n    }\n  }\n\n  // Update Contact\n  const updateContact = async ({ list_id, contact }) => {\n    console.log('list_id ', list_id)\n    console.log(contact)\n    try {\n      const res = await api.put(\n        `/lists/${list_id}/contacts/${contact.id}`,\n        contact\n      )\n\n      dispatch({\n        type: UPDATE_CONTACT,\n        payload: res.data\n      })\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: 'Erro ao atualizar o contato'\n      })\n    }\n  }\n\n  // Clear Contacts\n  const clearContacts = () => {\n    dispatch({ type: CLEAR_CONTACTS })\n  }\n\n  // Set Current Contact\n  const setCurrentContact = contact => {\n    dispatch({ type: SET_CURRENT_CONTACT, payload: contact })\n  }\n\n  // Clear Current Contact\n  const clearCurrent = () => {\n    dispatch({ type: CLEAR_CURRENT_CONTACT })\n  }\n\n  // Filter Contacts\n  const filterContacts = text => {\n    dispatch({ type: FILTER_CONTACTS, payload: text })\n  }\n\n  // Clear Filter\n  const clearFilter = () => {\n    dispatch({ type: CLEAR_FILTER_CONTACT })\n  }\n\n  return (\n    <ContactContext.Provider\n      value={{\n        contacts: state.contacts,\n        current: state.current,\n        filtered: state.filtered,\n        error: state.error,\n        addContact,\n        deleteContact,\n        setCurrentContact,\n        clearCurrent,\n        updateContact,\n        filterContacts,\n        clearFilter,\n        getContacts,\n        clearContacts\n      }}\n    >\n      {props.children}\n    </ContactContext.Provider>\n  )\n}\n\nexport default ContactState"]},"metadata":{},"sourceType":"module"}