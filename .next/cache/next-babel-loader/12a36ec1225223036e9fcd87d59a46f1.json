{"ast":null,"code":"import { takeLatest, all, put, select, call } from 'redux-saga/effects';\nimport { apiSignIn, apiSignInSuccessful, apiSignInFailure, fetchUserSuccessful, reloadUser, modalMessage, refreshToken } from './index';\nimport * as services from './services';\nimport { getEditions } from './../editions/services';\n\nfunction* fetchUserRequest({\n  payload\n}) {\n  try {\n    const {\n      apiAuth\n    } = yield select();\n    const userId = payload || apiAuth.user.id;\n    const response = yield call(services.fetchUser, userId);\n    yield put(fetchUserSuccessful(response.data));\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nexport function* apiSignInRequest({\n  payload\n}) {\n  try {\n    const {\n      auth\n    } = yield select();\n    const response = yield call(services.signIn, payload || auth.user.token);\n    yield call(fetchUserRequest, {\n      payload: response.data.data.id\n    });\n    yield put(apiSignInSuccessful());\n  } catch (e) {\n    console.error(e);\n    yield put(apiSignInFailure());\n  }\n}\nexport function* verifyDataFromUser(payload) {\n  try {\n    const {\n      editions\n    } = yield select();\n    const {\n      phone,\n      birthday,\n      gender\n    } = payload;\n    const listEditions = yield call(getEditions, editions.list.pagination);\n    const userHasInscription = listEditions.data.find(inscription => inscription.inscriptions[0]);\n\n    if (userHasInscription && process.env.REACT_APP_PROJECT_ID === '50' && (!phone || !payload.taxpayer_number || !birthday || !gender)) {\n      yield put(modalMessage());\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nfunction* watchApiSignIn() {\n  yield takeLatest(apiSignIn, apiSignInRequest);\n}\n\nfunction* watchReloadUser() {\n  yield takeLatest(reloadUser, fetchUserRequest);\n}\n\nfunction* watchRefreshToken() {\n  yield takeLatest(refreshToken, fetchUserRequest);\n}\n\nexport default function* () {\n  yield all([watchApiSignIn(), watchReloadUser(), watchRefreshToken()]);\n}","map":{"version":3,"sources":["/media/renatha/Downloads/DEV/IFPB/contacts-ui/store/modules/auth/sagas.js"],"names":["takeLatest","all","put","select","call","apiSignIn","apiSignInSuccessful","apiSignInFailure","fetchUserSuccessful","reloadUser","modalMessage","refreshToken","services","getEditions","fetchUserRequest","payload","apiAuth","userId","user","id","response","fetchUser","data","e","console","error","apiSignInRequest","auth","signIn","token","verifyDataFromUser","editions","phone","birthday","gender","listEditions","list","pagination","userHasInscription","find","inscription","inscriptions","process","env","REACT_APP_PROJECT_ID","taxpayer_number","watchApiSignIn","watchReloadUser","watchRefreshToken"],"mappings":"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","sourcesContent":["import { takeLatest, all, put, select, call } from 'redux-saga/effects'\n\nimport {\n  apiSignIn,\n  apiSignInSuccessful,\n  apiSignInFailure,\n  fetchUserSuccessful,\n  reloadUser,\n  modalMessage,\n  refreshToken\n} from './index'\n\nimport * as services from './services'\nimport { getEditions } from './../editions/services'\n\nfunction * fetchUserRequest ({ payload }) {\n  try {\n    const { apiAuth } = yield select()\n    const userId = payload || apiAuth.user.id\n    const response = yield call(services.fetchUser, userId)\n    yield put(fetchUserSuccessful(response.data))\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nexport function * apiSignInRequest ({ payload }) {\n  try {\n    const { auth } = yield select()\n    const response = yield call(services.signIn, payload || auth.user.token)\n    yield call(fetchUserRequest, { payload: response.data.data.id })\n    yield put(apiSignInSuccessful())\n  } catch (e) {\n    console.error(e)\n    yield put(apiSignInFailure())\n  }\n}\n\nexport function * verifyDataFromUser (payload) {\n  try {\n    const { editions } = yield select()\n    const { phone, birthday, gender } = payload\n    const listEditions = yield call(getEditions, editions.list.pagination)\n    const userHasInscription = listEditions.data.find(inscription => inscription.inscriptions[0])\n    if (userHasInscription && process.env.REACT_APP_PROJECT_ID === '50' && (!phone || !payload.taxpayer_number || !birthday || !gender)) {\n      yield put(modalMessage())\n    }\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nfunction * watchApiSignIn () {\n  yield takeLatest(apiSignIn, apiSignInRequest)\n}\n\nfunction * watchReloadUser () {\n  yield takeLatest(reloadUser, fetchUserRequest)\n}\n\nfunction * watchRefreshToken () {\n  yield takeLatest(refreshToken, fetchUserRequest)\n}\n\nexport default function * () {\n  yield all([\n    watchApiSignIn(),\n    watchReloadUser(),\n    watchRefreshToken()\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}