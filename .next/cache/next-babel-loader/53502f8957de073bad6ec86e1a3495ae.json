{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext } from 'react';\nimport Route from 'next/route';\nimport AuthContext from '../context/auth/authContext';\nconst login = '/login?redirected=true';\n\nconst checkUserAuthentication = () => {\n  const authContext = useContext(AuthContext);\n  const {\n    isAuthenticated,\n    loading\n  } = authContext;\n  return {\n    auth: isAuthenticated\n  };\n};\n\nexport default (WrappedCompomemt => {\n  hocComponent.getInitialProps = async context => {\n    const userAuth = await checkUserAuthentication();\n\n    if (!(userAuth === null || userAuth === void 0 ? void 0 : userAuth.auth)) {\n      if (context.res) {\n        var _context$res, _context$res2;\n\n        (_context$res = context.res) === null || _context$res === void 0 ? void 0 : _context$res.writeHead(302, {\n          Location: login\n        });\n        (_context$res2 = context.res) === null || _context$res2 === void 0 ? void 0 : _context$res2.end();\n      } else {\n        Route.replace(login);\n      }\n    } else if (WrappedCompomemt.getInitialProps) {\n      const wrapperProps = await WrappedCompomemt.getInitialProps(_objectSpread(_objectSpread({}, context), {}, {\n        auth: userAuth\n      }));\n      return _objectSpread(_objectSpread({}, wrapperProps), {}, {\n        userAuth\n      });\n    }\n\n    return {\n      userAuth\n    };\n  };\n\n  return hocComponent;\n});","map":{"version":3,"sources":["/media/renatha/Downloads/DEV/IFPB/contacts-ui/components/withPrivateRoute.js"],"names":["React","useContext","Route","AuthContext","login","checkUserAuthentication","authContext","isAuthenticated","loading","auth","WrappedCompomemt","hocComponent","getInitialProps","context","userAuth","res","writeHead","Location","end","replace","wrapperProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,YAAlB;AAEA,OAAOC,WAAP,MAAwB,6BAAxB;AAEA,MAAMC,KAAK,GAAG,wBAAd;;AAEA,MAAMC,uBAAuB,GAAG,MAAM;AACpC,QAAMC,WAAW,GAAGL,UAAU,CAACE,WAAD,CAA9B;AACA,QAAM;AAAEI,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAA+BF,WAArC;AACA,SAAO;AAAEG,IAAAA,IAAI,EAAEF;AAAR,GAAP;AAED,CALD;;AAOA,gBAAeG,gBAAgB,IAAI;AACjCC,EAAAA,YAAY,CAACC,eAAb,GAA+B,MAAOC,OAAP,IAAmB;AAChD,UAAMC,QAAQ,GAAG,MAAMT,uBAAuB,EAA9C;;AAEA,QAAI,EAACS,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEL,IAAX,CAAJ,EAAqB;AACnB,UAAII,OAAO,CAACE,GAAZ,EAAiB;AAAA;;AACf,wBAAAF,OAAO,CAACE,GAAR,8DAAaC,SAAb,CAAuB,GAAvB,EAA4B;AAC1BC,UAAAA,QAAQ,EAAEb;AADgB,SAA5B;AAGA,yBAAAS,OAAO,CAACE,GAAR,gEAAaG,GAAb;AACD,OALD,MAKO;AACLhB,QAAAA,KAAK,CAACiB,OAAN,CAAcf,KAAd;AACD;AACF,KATD,MASO,IAAIM,gBAAgB,CAACE,eAArB,EAAsC;AAC3C,YAAMQ,YAAY,GAAG,MAAMV,gBAAgB,CAACE,eAAjB,iCAAsCC,OAAtC;AAA+CJ,QAAAA,IAAI,EAAEK;AAArD,SAA3B;AACA,6CAAYM,YAAZ;AAA0BN,QAAAA;AAA1B;AACD;;AACD,WAAO;AAAEA,MAAAA;AAAF,KAAP;AACD,GAjBD;;AAkBA,SAAOH,YAAP;AACD,CApBD","sourcesContent":["import React, { useContext } from 'react'\nimport Route from 'next/route'\n\nimport AuthContext from '../context/auth/authContext'\n\nconst login = '/login?redirected=true'\n\nconst checkUserAuthentication = () => {\n  const authContext = useContext(AuthContext)\n  const { isAuthenticated, loading } = authContext\n  return { auth: isAuthenticated }\n\n}\n\nexport default WrappedCompomemt => {\n  hocComponent.getInitialProps = async (context) => {\n    const userAuth = await checkUserAuthentication()\n\n    if (!userAuth?.auth) {\n      if (context.res) {\n        context.res?.writeHead(302, {\n          Location: login,\n        })\n        context.res?.end()\n      } else {\n        Route.replace(login)\n      }\n    } else if (WrappedCompomemt.getInitialProps) {\n      const wrapperProps = await WrappedCompomemt.getInitialProps({ ...context, auth: userAuth })\n      return { ...wrapperProps, userAuth }\n    }\n    return { userAuth }\n  }\n  return hocComponent\n}\n"]},"metadata":{},"sourceType":"module"}