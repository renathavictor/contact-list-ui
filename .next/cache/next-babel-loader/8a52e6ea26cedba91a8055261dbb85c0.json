{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_LISTS, ADD_LIST, DELETE_LIST, SET_CURRENT, CLEAR_CURRENT, UPDATE_LIST, FILTER_LISTS, CLEAR_FILTER, LIST_ERROR, CLEAR_LISTS } from '../types';\n\nconst listReducer = (state, action) => {\n  switch (action.type) {\n    case GET_LISTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lists: action.payload,\n        loading: false\n      });\n\n    case ADD_LIST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        current: action.payload,\n        lists: [action.payload, ...state.lists],\n        loading: false\n      });\n\n    case UPDATE_LIST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lists: state.lists.map(list => list._id === action.payload._id ? action.payload : list),\n        loading: false\n      });\n\n    case DELETE_LIST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lists: state.lists.filter(list => list._id !== action.payload),\n        loading: false\n      });\n\n    case CLEAR_LISTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lists: null,\n        filtered: null,\n        error: null,\n        current: null\n      });\n\n    case SET_CURRENT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        current: action.payload\n      });\n\n    case CLEAR_CURRENT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        current: null\n      });\n\n    case FILTER_LISTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        filtered: state.lists.filter(list => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return list.name.match(regex) || list.email.match(regex);\n        })\n      });\n\n    case CLEAR_FILTER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        filtered: null\n      });\n\n    case LIST_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default listReducer;","map":{"version":3,"sources":["/media/renatha/Downloads/DEV/IFPB/contacts-ui/context/list/listReducer.js"],"names":["GET_LISTS","ADD_LIST","DELETE_LIST","SET_CURRENT","CLEAR_CURRENT","UPDATE_LIST","FILTER_LISTS","CLEAR_FILTER","LIST_ERROR","CLEAR_LISTS","listReducer","state","action","type","lists","payload","loading","current","map","list","_id","filter","filtered","error","regex","RegExp","name","match","email"],"mappings":";;;;;;AAAA,SACEA,SADF,EAEEC,QAFF,EAGEC,WAHF,EAIEC,WAJF,EAKEC,aALF,EAMEC,WANF,EAOEC,YAPF,EAQEC,YARF,EASEC,UATF,EAUEC,WAVF,QAWO,UAXP;;AAaA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKb,SAAL;AACE,6CACKW,KADL;AAEEG,QAAAA,KAAK,EAAEF,MAAM,CAACG,OAFhB;AAGEC,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKf,QAAL;AACE,6CACKU,KADL;AAEEM,QAAAA,OAAO,EAAEL,MAAM,CAACG,OAFlB;AAGED,QAAAA,KAAK,EAAE,CAACF,MAAM,CAACG,OAAR,EAAiB,GAAGJ,KAAK,CAACG,KAA1B,CAHT;AAIEE,QAAAA,OAAO,EAAE;AAJX;;AAMF,SAAKX,WAAL;AACE,6CACKM,KADL;AAEEG,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,CAAYI,GAAZ,CAAgBC,IAAI,IACzBA,IAAI,CAACC,GAAL,KAAaR,MAAM,CAACG,OAAP,CAAeK,GAA5B,GAAkCR,MAAM,CAACG,OAAzC,GAAmDI,IAD9C,CAFT;AAKEH,QAAAA,OAAO,EAAE;AALX;;AAOF,SAAKd,WAAL;AACE,6CACKS,KADL;AAEEG,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,CAAYO,MAAZ,CACLF,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaR,MAAM,CAACG,OADvB,CAFT;AAKEC,QAAAA,OAAO,EAAE;AALX;;AAOF,SAAKP,WAAL;AACE,6CACKE,KADL;AAEEG,QAAAA,KAAK,EAAE,IAFT;AAGEQ,QAAAA,QAAQ,EAAE,IAHZ;AAIEC,QAAAA,KAAK,EAAE,IAJT;AAKEN,QAAAA,OAAO,EAAE;AALX;;AAOF,SAAKd,WAAL;AACE,6CACKQ,KADL;AAEEM,QAAAA,OAAO,EAAEL,MAAM,CAACG;AAFlB;;AAIF,SAAKX,aAAL;AACE,6CACKO,KADL;AAEEM,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAKX,YAAL;AACE,6CACKK,KADL;AAEEW,QAAAA,QAAQ,EAAEX,KAAK,CAACG,KAAN,CAAYO,MAAZ,CAAmBF,IAAI,IAAI;AACnC,gBAAMK,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEb,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBAAOI,IAAI,CAACO,IAAL,CAAUC,KAAV,CAAgBH,KAAhB,KAA0BL,IAAI,CAACS,KAAL,CAAWD,KAAX,CAAiBH,KAAjB,CAAjC;AACD,SAHS;AAFZ;;AAOF,SAAKjB,YAAL;AACE,6CACKI,KADL;AAEEW,QAAAA,QAAQ,EAAE;AAFZ;;AAIF,SAAKd,UAAL;AACE,6CACKG,KADL;AAEEY,QAAAA,KAAK,EAAEX,MAAM,CAACG;AAFhB;;AAIF;AACE,aAAOJ,KAAP;AAnEJ;AAqED,CAtED;;AAwEA,eAAeD,WAAf","sourcesContent":["import {\n  GET_LISTS,\n  ADD_LIST,\n  DELETE_LIST,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_LIST,\n  FILTER_LISTS,\n  CLEAR_FILTER,\n  LIST_ERROR,\n  CLEAR_LISTS\n} from '../types'\n\nconst listReducer = (state, action) => {\n  switch (action.type) {\n    case GET_LISTS:\n      return {\n        ...state,\n        lists: action.payload,\n        loading: false\n      }\n    case ADD_LIST:\n      return {\n        ...state,\n        current: action.payload,\n        lists: [action.payload, ...state.lists],\n        loading: false\n      }\n    case UPDATE_LIST:\n      return {\n        ...state,\n        lists: state.lists.map(list =>\n          list._id === action.payload._id ? action.payload : list\n        ),\n        loading: false\n      }\n    case DELETE_LIST:\n      return {\n        ...state,\n        lists: state.lists.filter(\n          list => list._id !== action.payload\n        ),\n        loading: false\n      }\n    case CLEAR_LISTS:\n      return {\n        ...state,\n        lists: null,\n        filtered: null,\n        error: null,\n        current: null\n      }\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload\n      }\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null\n      }\n    case FILTER_LISTS:\n      return {\n        ...state,\n        filtered: state.lists.filter(list => {\n          const regex = new RegExp(`${action.payload}`, 'gi')\n          return list.name.match(regex) || list.email.match(regex)\n        })\n      }\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null\n      }\n    case LIST_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      }\n    default:\n      return state\n  }\n}\n\nexport default listReducer"]},"metadata":{},"sourceType":"module"}